diff <- function(x,y)
{
return(x/y) #Try also x+y
}
TheLine <- function(x1,y1,slp,d)
{
z = slope*(d-x1)+y1
return(z)
}
x = seq(-20,20,0.5)
y = seq(-20,20,0.5)
f = c(-5,5)
h = c(-5,5)
plot(f,h,main="Slope field")
for(j in x)
{
for(k in y)
{
slope = diff(j,k)
domain = seq(j-0.07,j+0.07,0.14)
z = TheLine(j,k,slope,domain)
arrows(domain[1],z[1],domain[2],z[2],length=0.08)
}
}
require(grDevices) # for colours
filled.contour(volcano, color = terrain.colors, asp = 1) # simple
x <- 10*1:nrow(volcano)
y <- 10*1:ncol(volcano)
filled.contour(x, y, volcano, color = terrain.colors,
plot.title = title(main = "The Topography of Maunga Whau",
xlab = "Meters North", ylab = "Meters West"),
plot.axes = { axis(1, seq(100, 800, by = 100))
axis(2, seq(100, 600, by = 100)) },
key.title = title(main = "Height\n(meters)"),
key.axes = axis(4, seq(90, 190, by = 10)))  # maybe also asp = 1
mtext(paste("filled.contour(.) from", R.version.string),
side = 1, line = 4, adj = 1, cex = .66)
# Annotating a filled contour plot
a <- expand.grid(1:20, 1:20)
b <- matrix(a[,1] + a[,2], 20)
filled.contour(x = 1:20, y = 1:20, z = b,
plot.axes = { axis(1); axis(2); points(10, 10) })
## Persian Rug Art:
x <- y <- seq(-4*pi, 4*pi, len = 27)
r <- sqrt(outer(x^2, y^2, "+"))
filled.contour(cos(r^2)*exp(-r/(2*pi)), axes = FALSE)
## rather, the key *should* be labeled:
filled.contour(cos(r^2)*exp(-r/(2*pi)), frame.plot = FALSE,
plot.axes = {})
require(grDevices) # for colours
filled.contour(volcano, color = terrain.colors, asp = 1) # simple
x <- 10*1:nrow(volcano)
y <- 10*1:ncol(volcano)
filled.contour(x, y, volcano, color = terrain.colors,
plot.title = title(main = "The Topography of Maunga Whau",
xlab = "Meters North", ylab = "Meters West"),
plot.axes = { axis(1, seq(100, 800, by = 100))
axis(2, seq(100, 600, by = 100)) },
key.title = title(main = "Height\n(meters)"),
key.axes = axis(4, seq(90, 190, by = 10)))  # maybe also asp = 1
mtext(paste("filled.contour(.) from", R.version.string),
side = 1, line = 4, adj = 1, cex = .66)
# Annotating a filled contour plot
a <- expand.grid(1:20, 1:20)
b <- matrix(a[,1] + a[,2], 20)
filled.contour(x = 1:20, y = 1:20, z = b,
plot.axes = { axis(1); axis(2); points(10, 10) })
f <- function(x, y) x^2 - y^2
xx <- c(-1, 1); yy <- c(-1, 1)
## Not run:
vectorfield(f, xx, yy, scale = 0.1)
for (xs in seq(-1, 1, by = 0.25)) {
sol <- rk4(f, -1, 1, xs, 100)
lines(sol$x, sol$y, col="darkgreen")
}
grid()
## End(Not run)
library(oce)
plot(c(-1.5, 1.5), c(-1.5, 1.5), xlab="", ylab="", type='n')
drawDirectionField(x=rep(0, 2), y=rep(0, 2), u=c(1, 1), v=c(1, -1), scalex=0.5, add=TRUE)
plot(c(-1.5, 1.5), c(-1.5, 1.5), xlab="", ylab="", type='n')
drawDirectionField(x=rep(0, 2), y=rep(0, 2), u=c(1, 1), v=c(1, -1), scalex=0.5, add=TRUE,
type=2)
install.packages("oce")
library(oce)
plot(c(-1.5, 1.5), c(-1.5, 1.5), xlab="", ylab="", type='n')
drawDirectionField(x=rep(0, 2), y=rep(0, 2), u=c(1, 1), v=c(1, -1), scalex=0.5, add=TRUE)
plot(c(-1.5, 1.5), c(-1.5, 1.5), xlab="", ylab="", type='n')
drawDirectionField(x=rep(0, 2), y=rep(0, 2), u=c(1, 1), v=c(1, -1), scalex=0.5, add=TRUE,
type=2)
#################### Program to create the soils File in PIHM from Data in SSurgo and other resources##################
################# Felipe Montes ##########################
################# 2015 11 13 ############################
########### Tell the program where the package libraries are  #####################
.libPaths("C:/Felipe/R_Library/library")    ;
########### Call the library packages needed for the program to work #############
library(rgdal);
library(sp);
library(RColorBrewer) ;
library(lattice) ;
library(ggplot2)  ;
library(rgeos)   ;
library(tmap) ;
library(dplyr)  ;
library(tidyr)  ;
.libPaths("C:/Felipe/Sotware&Coding/R_Library/library")  ;
getwd()
Att<-read.table("C:\\Users\\frm10\\Desktop\\WE38.att",header=T, as.is=T)
head(Att)
Att$LAI<-0
head(Att)
write.table(Att,"C:\\Users\\frm10\\Desktop\\WE382.att", quote=F ,sep="\t")
head(Att)
View(Att)
View(Att)
write.table(Att,"C:\\Users\\frm10\\Desktop\\WE382.att", quote=F ,sep="\t")
Att<-read.table("C:\\Users\\frm10\\Desktop\\WE38.att",header=T, as.is=T)
head(Att)
Att$LAI<-0
head(Att)
write.table(Att,"C:\\Users\\frm10\\Desktop\\WE382.att", quote=F ,sep="\t")
tail(Att)
write.table(Att,"C:\\Users\\frm10\\Desktop\\WE38_3.att", quote=F ,sep="\t")
Att<-read.table("C:\\Users\\frm10\\Desktop\\WE38.att",header=T, as.is=T)
head(Att)
Att$LAI<-c(0)
head(Att)
write.table(Att,"C:\\Users\\frm10\\Desktop\\WE38_2.att", quote=F ,sep="\t")
write.table(Att,"C:\\Users\\frm10\\Desktop\\WE38_2.att", quote=F ,sep="\t", row.names = F)
find_rtools()
library(devtools)
.libPaths("C:/Felipe/Sotware&Coding/R_Library/library")  ;
library(devtools)
find_rtools()
system(paste(getwd(),"tob32 -a",sep="/"))
system(shQuote("C:\\Felipe\\Eddy Covariance System\\RCode\\TOB3intoR>tob32.exe -a 6358.Flux.dat",type="cmd"))
system2("tob32.exe", args=c("-a", "6358.Flux.dat"))
system2("tob32.exe", args=c("-a", "6358.Flux.dat"))
shell("tob32 -a 6358.Flux.dat",NULL)
system(Sys.getenv("COMSPEC"))
system(paste('"c:/Program Files/Mozilla Firefox/firefox.exe"',
'-url cran.r-project.org'), wait = FALSE)
system(getwd(),"dir")
system("dir")
system("notepad myfile.txt")
system(paste0(getwd(),"dir"))
system(paste0(getwd(),"/dir"))
system("C:\\Users\\frm10\\Documents\\dir"))
system("C:\\Users\\frm10\\Documents\\dir")
system("C:\Users\frm10\Documents\dir")
system("C:\\Users\\frm10\\Documents\\dir")
system("C:\\Users\\frm10\\Documents\\")
system("dir")
system("C:\Users\frm10>dir")
system("C:\\Users\\frm10>dir")
find_rtools()
system("C:\\Felipe\\Eddy Covariance System\\RCode\\TOB3intoR>tob32")
system("cd")
ys.getenv("PATH")
Sys.getenv("PATH")
Sys.getenv("PATH")
.libPaths("C:/Felipe/R_Library/library")
.libPaths("C:/Felipe/Sotware&Coding/R_Library/library")  ;
install.packages("XML")
library("XML", lib.loc="C:/Felipe/Sotware&Coding/R_Library/library")
library("XML")
XMLFiles<-list.files("./InputXMLfiles")
XMLFiles
list.files("./InputXMLfiles")
list.files()
setwd("C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_R_Scripts\\xmlforcing");
list.files()
list.files("./InputXMLfiles")
XMLFiles<-list.files("./InputXMLfiles")
XMLFiles
XMLFiles[1]
paste0(".\\OutputXMLFiles\\",XMLFiles[1])
.libPaths("C:/Felipe/Sotware&Coding/R_Library/library")  ;
setwd("C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_R_Scripts\\xmlforcing");
library("XML")
XMLFiles<-list.files("./InputXMLfiles")
XMLFiles
Forcing1<-xmlParse(XMLFiles[1])
paste0("./InputXMLfiles",XMLFiles[1])
Forcing1<-xmlParse(paste0("./InputXMLfiles",XMLFiles[1]))
setwd("./InputXMLfiles")
getwd(())
getwd()
Forcing1<-xmlParse('C:/Felipe/PIHM-CYCLES/PIHM/PIHM_R_Scripts/xmlforcing/InputXMLfiles/HT_Forcing.xml')
.libPaths("C:/Felipe/Sotware&Coding/R_Library/library")  ;
setwd("C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_R_Scripts\\xmlforcing");
library("XML")
XMLFiles<-list.files("./InputXMLfiles")
XMLFiles
paste0("./InputXMLfiles",XMLFiles[1])
paste0("./InputXMLfiles/",XMLFiles[1])
Forcing1<-xmlParse(paste0("./InputXMLfiles/",XMLFiles[1]))
paste0("./OutputXMLFiles/",XMLFiles[1])
#Felipe Montes 20115 02 09
#XML Parsing
#Taken from Nolan, Deborah, and Duncan Temple Lang. 2013. XML and Web Technologies for Data Sciences with R. 2014 edition. New York: Springer
#This version works on the LionX linus cluster and is capable of handling large ammount of data
#  Tell the program where the package libraries are  #####################
.libPaths("C:/Felipe/Sotware&Coding/R_Library/library")  ;
#      set the working directory
### setwd("/gpfs/home/frm10/scratch")
setwd("C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_R_Scripts\\xmlforcing");
#Install necesary packages
#install.packages("XML")
#Call to use the installed packages
library("XML")
##### Get the name of the files in the input files ######
XMLFiles<-list.files("./InputXMLfiles")
#F
#First, we get the set of nodes that have all the Hydroterre forcing records. This is done by using the Parsed Forcing1 xml in R, getting to the rot node and extracting all the childs of the node that have the information
#Parsing the hydroterre XML document
#Forcing1<-xmlParse("HT_Forcing.xml")
#Forcing1<-xmlParse("HT_Forcing_4years.xml")
#Forcing1<-xmlParse("HT_Forcing_20years.xml")
Forcing1<-xmlParse(paste0("./InputXMLfiles/",XMLFiles[1]))
#F
#Then we get a list of the HUC12 ID included in the Hydroterre file, and we get it by getting the values from the HUC_ID_List nodeand convertting them into a R List object
HUC12.IDs<-xpathApply(Forcing1,"/PIHM_Forcing/Forcing_Inputs/HUC_ID_List",xmlValue)
#Using getNodeSet() and PAX a subset of nodes can be Selected. To do that we use the PAX sinthax within R Using the XML package
#First Try to gell all the Index-Start node Sets
Index.Start<-getNodeSet(Forcing1,"//Index_Start")
Index.Start.Value<-xmlToDataFrame(Index.Start)
#Same With Index_End nodes
Index.End<-getNodeSet(Forcing1,"//Index_End")
Index.End.Value<-xmlToDataFrame(Index.End)
Data.nodes<-paste0("//",HUC12.IDs[[1]])
Forcing.Data.Nodes<-getNodeSet(Forcing1,Data.nodes)
Forcing.Data.Value<-xmlToDataFrame(Forcing.Data.Nodes)
write.csv(Forcing.Data.Value,file=paste0("./OutputXMLFiles/",XMLFiles[1]))
write.csv(Forcing.Data.Value,file=paste0("./OutputXMLFiles/",XMLFiles[1],".csv"))
###############################################################################################################
#Felipe Montes 20115 02 09
#XML Parsing
#Taken from Nolan, Deborah, and Duncan Temple Lang. 2013. XML and Web Technologies for Data Sciences with R. 2014 edition. New York: Springer
#This version works on the LionX linus cluster and is capable of handling large ammount of data
###############################################################################################################
###############################################################################################################
#                    Tell the program where the package libraries are
###############################################################################################################
.libPaths("C:/Felipe/Sotware&Coding/R_Library/library")  ;
###############################################################################################################
#                     set the working directory
###############################################################################################################
### setwd("/gpfs/home/frm10/scratch")
setwd("C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_R_Scripts\\HT_Parsing_Data\\xmlforcing");
###############################################################################################################
#Felipe Montes 20115 02 09
#XML Parsing
#Taken from Nolan, Deborah, and Duncan Temple Lang. 2013. XML and Web Technologies for Data Sciences with R. 2014 edition. New York: Springer
#This version works on the LionX linus cluster and is capable of handling large ammount of data
###############################################################################################################
###############################################################################################################
#                    Tell the program where the package libraries are
###############################################################################################################
.libPaths("C:/Felipe/Sotware&Coding/R_Library/library")  ;
###############################################################################################################
#                     set the working directory
###############################################################################################################
### setwd("/gpfs/home/frm10/scratch")
setwd("C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_R_Scripts\\HT_Parsing_Data\\xmlforcing");
.libPaths("C:/Felipe/Sotware&Coding/R_Library/library")  ;
setwd("C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_R_Scripts\\HT_Parsing_Data\\xmlforcing");
library("XML")
library("XML")    ;
library("XML", lib.loc="~/R/win-library/3.4")
library("abind", lib.loc="C:/Felipe/Sotware&Coding/R_Library/library")
.libPaths("C:/Felipe/Sotware&Coding/R_Library/library")  ;
setwd("C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_R_Scripts\\HT_Parsing_Data\\xmlforcing");
library("XML")    ;
XMLFiles<-list.files("./InputXMLfiles")
XMLFiles
Forcing1<-xmlParse(paste0("./InputXMLfiles/",XMLFiles[1]))
HUC12.IDs<-xpathApply(Forcing1,"/PIHM_Forcing/Forcing_Inputs/HUC_ID_List",xmlValue)
Index.Start<-getNodeSet(Forcing1,"//Index_Start")
Index.Start
Index.Start.Value<-xmlToDataFrame(Index.Start)
Index.End<-getNodeSet(Forcing1,"//Index_End")
Index.Start.Value
Index.End<-getNodeSet(Forcing1,"//Index_End")
Index.End.Value<-xmlToDataFrame(Index.End)
Data.nodes<-paste0("//",HUC12.IDs[[1]])
Data.nodes
Forcing.Data.Nodes<-getNodeSet(Forcing1,Data.nodes)
Forcing.Data.Value<-xmlToDataFrame(Forcing.Data.Nodes)
Forcing.Data.Value
Forcing.Data.Value$DateTime<-as.character(Forcing.Data.Value$DateTime)  ;
Forcing.Date<-sapply(strsplit(Forcing.Data.Value$DateTime,"T"),'[',1);
Forcing.Time<-sapply(strsplit(Forcing.Data.Value$DateTime,"T"),'[',2);
Forcing.Time.UTC<-sapply(strsplit(Forcing.Time,"-"),"[",1);
Forcing.Data.Value$UTC<-as.POSIXct(paste(Forcing.Date,Forcing.Time.UTC), format= "%Y-%m-%d %H:%M:%S")  ;
PIHM.TS<-Forcing.Data.Value$Time.EST<-Forcing.Data.Value$UTC-(60*60*5) ;
PIHM.TS
HT.index<-c("Avg");
Precip.index<-which(names(HT.Data) %in% paste("Precip", HT.index, sep="_"));
PIHM.TS<-HT.Data$Time.EST<-HT.Data$UTC-(60*60*5) ;
HT.Data<-rbind(HT.Data_79_89[HT.Data_79_89$UTC>=as.POSIXct("1979-01-01 00:00:00") & HT.Data_79_89$UTC<=as.POSIXct("1989-12-31 23:00:00"),],HT.Data_89_99[HT.Data_89_99$UTC>=as.POSIXct("1990-01-01 00:00:00") & HT.Data_89_99$UTC<=as.POSIXct("1999-12-31 23:00:00"), ],HT.Data_99_09[HT.Data_99_09$UTC>=as.POSIXct("2001-01-01 00:00:00") & HT.Data_99_09$UTC<=as.POSIXct("2009-12-31 23:00:00"), ])
Forcing.Data.Value$PIHM.TS<-Forcing.Data.Value$Time.EST<-Forcing.Data.Value$UTC-(60*60*5) ;
HT.index<-c("Avg");
paste("Precip", HT.index, sep="_")
which(names(Forcing.Data.Value) %in% paste("Precip", HT.index, sep="_"))
Precip.index<-which(names(Forcing.Data.Value) %in% paste("Precip", HT.index, sep="_"));
PIHM.TS<-Forcing.Data.Value$Time.EST<-Forcing.Data.Value$UTC-(60*60*5) ;
PIHM.PRCP<-round(signif(HT.Data[,Precip.index]*(1000/86400),digits=3),8) ;
PIHM.PRCP<-round(signif(Forcing.Data.Value[,Precip.index]*(1000/86400),digits=3),8) ;
Forcing.Data.Value[,Precip.index]
str(Forcing.Data.Value[,Precip.index])
Precip.Data<-Forcing.Data.Value[,Precip.index]   ;
Precip.Data<-as.numeric(as.character(Forcing.Data.Value[,Precip.index]))   ;
str(Precip.Data)
Precip.Data<-as.numeric(Forcing.Data.Value[,Precip.index])   ;
str(Precip.Data)
Precip.index<-which(names(Forcing.Data.Value) %in% paste("Precip", HT.index, sep="_"));
Precip.Data<-as.numeric(Forcing.Data.Value[,Precip.index])   ;
str(Precip.Data)
Precip.Data<-as.numeric(as.character(Forcing.Data.Value[,Precip.index]))   ;
PIHM.PRCP<-round(signif(Precip.Data*(1000/86400),digits=3),8) ;
Temp.index<-which(names(Forcing.Data.Value) %in% paste("Temp", HT.index, sep="_")) ;
Temp.index
Temp.Data<-as.numeric(as.character(Forcing.Data.Value[,Temp.index]))   ;
PIHM.SFCTMP<-round(Temp.Data+273.15,digits=2) ;
RH.index<-which(names(Forcing.Data.Value) %in% paste("RH", HT.index, sep="_")) ;
RH.Data<-as.numeric(as.character(Forcing.Data.Value[,RH.index]))   ;
PIHM.RH<-round(RH.Data*100, digits=2)  ;
Wind.index<-which(names(Forcing.Data.Value) %in% paste("Wind", HT.index, sep="_")) ;
Wind.Data<-as.numeric(as.character(Forcing.Data.Value[,Wind.index]))   ;
PIHM.SFCSPD<-round(Wind.Data/86400, digits=2)  ;
RN.index<-which(names(Forcing.Data.Value) %in% paste("RN", HT.index, sep="_")) ;
RN.Data<-as.numeric(as.character(Forcing.Data.Value[,RN.index]))   ;
PIHM.SOLAR<-round(RN.Data/86400, digits=2)  ;
head(PIHM.SOLAR)
head(PIHM.SOLAR,30)
LW.index<-which(names(Forcing.Data.Value) %in% paste("LW", HT.index, sep="_")) ;
LW.Data<-as.numeric(as.character(Forcing.Data.Value[,LW.index]))   ;
PIHM.LONGWV<-round(LW.Data/86400, digits=2)  ;
cat(c("NUM_METEO_TS", "1" ), file="WE38.FORC", sep= "\t", fill=T) ;
paste0("./OutputXMLFiles/",XMLFiles[1])
paste0("./OutputXMLFiles/","PIHM_",XMLFiles[1])
cat(c("NUM_METEO_TS", "1" ), file=paste0("./OutputXMLFiles/","PIHM_",XMLFiles[1]), sep= "\t", fill=T) ;
cat(c("NUM_METEO_TS", "1" ), file=paste0("./OutputXMLFiles/","PIHM_",XMLFiles[1]), sep= "\t", fill=T) ;
cat(c("METEO_TS" , "1" ,"WIND_LVL", "10.0" ), file=paste0("./OutputXMLFiles/","PIHM_",
XMLFiles[1]), append=T, sep= "\t", fill=T) ;
cat(c("TIME" , "PRCP" , "SFCTMP" , "RH" , "SFCSPD" , "SOLAR", "LONGWV" , "PRES"),
file=paste0("./OutputXMLFiles/","PIHM_",XMLFiles[1]), append=T, sep= "\t", fill=T) ;
cat(c("TS" , "kg/m2/s" , "K" , "%" , "m/s" , "W/m2" , "W/m2" , "Pa"),
file="paste0("./OutputXMLFiles/","PIHM_",XMLFiles[1]), append=T, sep= "\t", fill=T) ;
#  Add the data to the table
PIHM.data<-data.frame( PIHM.TS, PIHM.PRCP, PIHM.SFCTMP , PIHM.RH , PIHM.SFCSPD, PIHM.SOLAR , PIHM.LONGWV);
#########  Needs to get pressure in PA
PIHM.data$PRES<-97000.00;
######### Writing all the data into a table with the correct format
##  write.table(format(PIHM.data , scientific=6), file="WE38.FORC", append=T, sep= "\t", quote=F , col.names = F, row.names = F) ;
######### writting a subset of the table with the correct format
data.subset<-which(PIHM.data$PIHM.TS >= as.POSIXct("2005-01-01 00:00:00") & PIHM.data$PIHM.TS<=as.POSIXct("2010-12-31 23:59"));
PIHM.data.sub<-PIHM.data[data.subset,] ;
# Printed the time stamp in the correct format for PIHM inputs MM-PIHM
PIHM.data.sub$PIHM.TS<-format(PIHM.data.sub$PIHM.TS,format="%Y-%m-%d %H:%M") ;
write.table(format(PIHM.data.sub, scientific=6), file="WE38.FORC", append=T, sep= "\t", quote=F , col.names = F, row.names = F) ;
cat(c("NUM_METEO_TS", "1" ), file=paste0("./OutputXMLFiles/","PIHM_",XMLFiles[1]), sep= "\t", fill=T) ;
cat(c("METEO_TS" , "1" ,"WIND_LVL", "10.0" ), file=paste0("./OutputXMLFiles/","PIHM_",
XMLFiles[1]), append=T, sep= "\t", fill=T) ;
cat(c("TIME" , "PRCP" , "SFCTMP" , "RH" , "SFCSPD" , "SOLAR", "LONGWV" , "PRES"),
file=paste0("./OutputXMLFiles/","PIHM_",XMLFiles[1]), append=T, sep= "\t", fill=T) ;
cat(c("TS" , "kg/m2/s" , "K" , "%" , "m/s" , "W/m2" , "W/m2" , "Pa"),
file=paste0("./OutputXMLFiles/","PIHM_",XMLFiles[1]), append=T, sep= "\t", fill=T) ;
